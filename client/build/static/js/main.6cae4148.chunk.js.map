{"version":3,"sources":["websocket.js","MessageWindow.jsx","TextBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["send","Message","text","username","self","className","MessageWindow","props","messageWindow","React","createRef","this","current","scrollTop","scrollHeight","clientHeight","messages","ref","map","msg","i","Component","TextBar","input","onSend","value","e","keyCode","sendMessage","bind","sendMessageIfEnter","type","onKeyDown","onClick","App","window","location","host","fn","state","onMessageReceived","JSON","parse","setState","concat","name","message","stringify","setUserName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6cae4148.chunk.js","sourcesContent":["// src/websocket.js\n\n// The server host is determined based on the mode\n// If the app is running in development mode (using npm start)\n// then we set the host to \"localhost:8080\"\n// If the app is in production mode (using npm run build)\n// then the host is the current browser host\nconst host =\n  process.env.NODE_ENV === 'production'\n    ? window.location.host\n    : 'localhost:8080'\n\n// We create an exported variable `send`, that we will assign\n// later (just know that it is exported for now)\nexport let send\n// The onMessageCallback is also assigned later, as we will soon see\nlet onMessageCallback\n\n// This exported function is used to initialize the websocket connection\n// to the server\nexport const startWebsocketConnection = () => {\n  // A new Websocket connection is initialized with the server\n  const ws = new window.WebSocket('ws://' + host + '/chat') || {}\n\n  // If the connection is successfully opened, we log to the console\n  ws.onopen = () => {\n    console.log('opened ws connection')\n  }\n\n  // If the connection is closed, we log that as well, along with\n  // the error code and reason for closure\n  ws.onclose = (e) => {\n    console.log('close ws connection: ', e.code, e.reason)\n  }\n\n  // This callback is called everytime a message is received.\n  ws.onmessage = (e) => {\n    // The onMessageCallback function is called with the message\n    // data as the argument\n    onMessageCallback && onMessageCallback(e.data)\n  }\n\n  // We assign the send method of the connection to the exported\n  // send variable that we defined earlier\n  send = ws.send.bind(ws)\n}\n\n// This function is called by our React application to register a callback\n// that needs to be called everytime a new message is received\nexport const registerOnMessageCallback = (fn) => {\n  // The callback function is supplied as an argument and assigned to the\n  // `onMessageCallback` variable we declared earlier\n  onMessageCallback = fn\n}\n","// src/MessageWindow.jsx\n\nimport React from 'react'\n// You can view the CSS at: https://github.com/sohamkamani/react-chat-example/blob/master/src/MessageWindow.css\n\n// The message component takes the message text and the username of the message\n// sender. It also takes `self` - a boolean value depicting whether the message\n// is sent by the current logged in user\nconst Message = ({ text, username, self }) => (\n  <div className={'message' + (self ? ' message-self' : '')}>\n    <div className=\"message-username\">{username}</div>\n    <div className=\"message-text\">{text}</div>\n  </div>\n)\n\n// The message window contains all the messages\nexport default class MessageWindow extends React.Component {\n  constructor(props) {\n    super(props)\n    // The `messageWindow` ref is used for autoscrolling the window\n    this.messageWindow = React.createRef()\n  }\n  componentDidUpdate() {\n    // Everytime the component updates (when a new message is sent) we\n    // change the `scrollTop` attribute to autoscroll the message window\n    // to the bottom\n    const messageWindow = this.messageWindow.current\n    messageWindow.scrollTop =\n      messageWindow.scrollHeight - messageWindow.clientHeight\n  }\n  render() {\n    const { messages = [], username } = this.props\n    // The message window is a container for the list of messages, which\n    // as mapped to `Message` components\n    return (\n      <div className=\"message-window\" ref={this.messageWindow}>\n        {messages.map((msg, i) => {\n          return (\n            <Message\n              key={i}\n              text={msg.text}\n              username={msg.username}\n              self={username === msg.username}\n            />\n          )\n        })}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n// The CSS can be viewed at https://github.com/sohamkamani/react-chat-example/blob/master/src/TextBar.css\n\nexport default class TextBar extends Component {\n  constructor(props) {\n    super(props)\n    // Initialize a new ref to hold the input element\n    this.input = React.createRef()\n  }\n\n  // The sendMessage method is called anytime the enter key is\n  // pressed, or if the \"Send\" button is clicked\n  sendMessage() {\n    this.props.onSend && this.props.onSend(this.input.current.value)\n    this.input.current.value = ''\n  }\n\n  // This method is assigned as the event listener to keypress events\n  // if the key turns out to be the enter key, send the message by\n  // calling the `sendMessage` method\n  sendMessageIfEnter(e) {\n    if (e.keyCode === 13) {\n      this.sendMessage()\n    }\n  }\n  render() {\n    // Create functions by binding the methods to the instance\n    const sendMessage = this.sendMessage.bind(this)\n    const sendMessageIfEnter = this.sendMessageIfEnter.bind(this)\n\n    // The textbar consists of the input form element, and the send button\n    // The `sendMessageIfEnter` function is assigned as the event listener\n    // to keydown events for the text input\n    // The `sendMessage` function is assigned as the listener for the click\n    // event on the Send button\n    return (\n      <div className=\"textbar\">\n        <input\n          className=\"textbar-input\"\n          type=\"text\"\n          ref={this.input}\n          onKeyDown={sendMessageIfEnter}\n        />\n        <button className=\"textbar-send\" onClick={sendMessage}>\n          Send\n        </button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport axios from 'axios'\nimport MessageWindow from './MessageWindow'\nimport TextBar from './TextBar'\nimport { registerOnMessageCallback, send } from './websocket'\n\nclass App extends Component {\n  state = {\n    messages: [],\n    username: null,\n  }\n\n  constructor(props) {\n    super(props)\n    // The onMessageReceived method is registered as the callback\n    // with the imported `registerOnMessageCallback`\n    // Everytime a new message is received, `onMessageReceived` will\n    // get called\n    registerOnMessageCallback(this.onMessageReceived.bind(this))\n  }\n\n  onMessageReceived(msg) {\n    // Once we receive a message, we will parse the message payload\n    // Add it to our existing list of messages, and set the state\n    // with the new list of messages\n    msg = JSON.parse(msg)\n    this.setState({\n      messages: this.state.messages.concat(msg),\n    })\n  }\n\n  // This is a helper method used to set the username\n  setUserName(name) {\n    this.setState({\n      username: name,\n    })\n  }\n\n  // This method accepts the message text\n  // It then constructs the message object, stringifies it\n  // and sends the string to the server using the `send` function\n  // imported from the websockets package\n  sendMessage(text) {\n    const message = {\n      username: this.state.username,\n      text: text,\n    }\n    send(JSON.stringify(message))\n  }\n\n  render() {\n    // Create functions by binding the methods to the instance\n    const setUserName = this.setUserName.bind(this)\n    const sendMessage = this.sendMessage.bind(this)\n\n    // If the username isn't set yet, we display just the textbar\n    // along with a hint to set your username. Once the text is entered\n    // the `setUsername` method adds the username to the state\n    if (this.state.username === null) {\n      return (\n        <div className=\"container\">\n          <div className=\"container-title\">Enter username</div>\n          <TextBar onSend={setUserName} />\n        </div>\n      )\n    }\n\n    // If the username is already set, we display the message window with\n    // the text bar under it. The `messages` prop is set as the states current list of messages\n    // the `username` prop is set as the states current username\n    // The `onSend` prop of the TextBar is bound to the `sendMessage` method\n    return (\n      <div className=\"container\">\n        <div className=\"container-title\">Messages</div>\n        <MessageWindow\n          messages={this.state.messages}\n          username={this.state.username}\n        />\n        <TextBar onSend={sendMessage} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}