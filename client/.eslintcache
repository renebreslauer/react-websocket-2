[{"/Users/renebreslauer/Downloads/react-websocket-2/client/src/index.js":"1","/Users/renebreslauer/Downloads/react-websocket-2/client/src/reportWebVitals.js":"2","/Users/renebreslauer/Downloads/react-websocket-2/client/src/App.js":"3","/Users/renebreslauer/Downloads/react-websocket-2/client/src/websocket.js":"4","/Users/renebreslauer/Downloads/react-websocket-2/client/src/MessageWindow.jsx":"5","/Users/renebreslauer/Downloads/react-websocket-2/client/src/TextBar.jsx":"6"},{"size":500,"mtime":1609882311698,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1609882311699,"results":"9","hashOfConfig":"8"},{"size":2641,"mtime":1609884830689,"results":"10","hashOfConfig":"8"},{"size":1924,"mtime":1609884885477,"results":"11","hashOfConfig":"8"},{"size":1725,"mtime":1609884934694,"results":"12","hashOfConfig":"8"},{"size":1649,"mtime":1609884930743,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"9pvpp0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/renebreslauer/Downloads/react-websocket-2/client/src/index.js",[],["28","29"],"/Users/renebreslauer/Downloads/react-websocket-2/client/src/reportWebVitals.js",[],"/Users/renebreslauer/Downloads/react-websocket-2/client/src/App.js",["30"],"import React, { Component } from 'react'\nimport './App.css'\nimport axios from 'axios'\nimport MessageWindow from './MessageWindow'\nimport TextBar from './TextBar'\nimport { registerOnMessageCallback, send } from './websocket'\n\nclass App extends Component {\n  state = {\n    messages: [],\n    username: null,\n  }\n\n  constructor(props) {\n    super(props)\n    // The onMessageReceived method is registered as the callback\n    // with the imported `registerOnMessageCallback`\n    // Everytime a new message is received, `onMessageReceived` will\n    // get called\n    registerOnMessageCallback(this.onMessageReceived.bind(this))\n  }\n\n  onMessageReceived(msg) {\n    // Once we receive a message, we will parse the message payload\n    // Add it to our existing list of messages, and set the state\n    // with the new list of messages\n    msg = JSON.parse(msg)\n    this.setState({\n      messages: this.state.messages.concat(msg),\n    })\n  }\n\n  // This is a helper method used to set the username\n  setUserName(name) {\n    this.setState({\n      username: name,\n    })\n  }\n\n  // This method accepts the message text\n  // It then constructs the message object, stringifies it\n  // and sends the string to the server using the `send` function\n  // imported from the websockets package\n  sendMessage(text) {\n    const message = {\n      username: this.state.username,\n      text: text,\n    }\n    send(JSON.stringify(message))\n  }\n\n  render() {\n    // Create functions by binding the methods to the instance\n    const setUserName = this.setUserName.bind(this)\n    const sendMessage = this.sendMessage.bind(this)\n\n    // If the username isn't set yet, we display just the textbar\n    // along with a hint to set your username. Once the text is entered\n    // the `setUsername` method adds the username to the state\n    if (this.state.username === null) {\n      return (\n        <div className=\"container\">\n          <div className=\"container-title\">Enter username</div>\n          <TextBar onSend={setUserName} />\n        </div>\n      )\n    }\n\n    // If the username is already set, we display the message window with\n    // the text bar under it. The `messages` prop is set as the states current list of messages\n    // the `username` prop is set as the states current username\n    // The `onSend` prop of the TextBar is bound to the `sendMessage` method\n    return (\n      <div className=\"container\">\n        <div className=\"container-title\">Messages</div>\n        <MessageWindow\n          messages={this.state.messages}\n          username={this.state.username}\n        />\n        <TextBar onSend={sendMessage} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","/Users/renebreslauer/Downloads/react-websocket-2/client/src/websocket.js",[],"/Users/renebreslauer/Downloads/react-websocket-2/client/src/MessageWindow.jsx",[],"/Users/renebreslauer/Downloads/react-websocket-2/client/src/TextBar.jsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":3,"column":8,"nodeType":"37","messageId":"38","endLine":3,"endColumn":13},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]